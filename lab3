==1. Принцип работы прерываний
Прерывания — это механизм, позволяющий микроконтроллеру оперативно реагировать на внешние или внутренние события, временно приостанавливая выполнение основной программы.

Как это работает:

При возникновении события (внешнего сигнала, таймера и т.д.) активируется прерывание

Процессор завершает текущую инструкцию

Сохраняет контекст (регистры, указатель инструкции) в стек

Переходит к выполнению обработчика прерывания (ISR)

После завершения ISR восстанавливает контекст и продолжает основную программу

Типы прерываний:

Аппаратные (от периферии: таймеры, UART, GPIO)

Программные (инициируются программно)

Исключения (ошибки выполнения, например, деление на ноль)







==2. Контроллер прерываний NVIC
Nested Vectored Interrupt Controller (NVIC) — это подсистема процессора, управляющая приоритетами и обработкой прерываний.

Основные функции NVIC:

Управление приоритетами прерываний

Возможность маскирования (отключения) прерываний

Поддержка вложенных прерываний

Автоматическое определение вектора прерывания

Управление состоянием прерываний (активно/ожидание)

NVIC позволяет эффективно обрабатывать множество прерываний с разными приоритетами, минимизируя задержки реакции на критические события.





==3. Таблица векторов прерываний
Таблица векторов прерываний — это массив указателей на функции-обработчики прерываний, расположенный в начале памяти микроконтроллера.

Особенности:

Каждому прерыванию соответствует определенная позиция в таблице

Содержит адреса обработчиков всех возможных прерываний

Обычно размещается по фиксированному адресу (часто 0x00000000)

Может быть переопределена в некоторых архитектурах

При возникновении прерывания процессор использует номер прерывания как индекс в этой таблице для получения адреса соответствующего обработчика.





==4. Обработчик прерываний (ISR)
Обработчик прерывания (Interrupt Service Routine, ISR) — это функция, которая выполняется при возникновении прерывания.

Правила написания обработчиков:

Должны быть максимально короткими и быстрыми

Не должны вызывать блокирующие или медленные функции

Должны очищать флаг прерывания (если не очищается автоматически)

Желательно использовать volatile переменные для обмена данными с основной программой

Не должны вызывать сложные операции (например, динамическое выделение памяти)





== 5. Обработка события переполнения таймера 2 через прерывание. Как это происходит?

*TIM2* — 32-битный таймер общего назначения, который может генерировать прерывание при переполнении, когда счетчик достигает заданного значения в регистре ARR и обнуляется.

*Шаги настройки таймера TIM2:*

1. Подключите тактирование модуля TIM2:
   RCC->APB1ENR |= RCC_APB1ENR_TIM2EN
2. Установите делитель (PSC) и значение автоперезагрузки (ARR), чтобы задать интервал.
3. Включите прерывание по переполнению:
   TIM2->DIER |= TIM_DIER_UIE
4. Очистите флаг переполнения:
   TIM2->SR &= ~TIM_SR_UIF
5. Включите таймер:
   TIM2->CR1 |= TIM_CR1_CEN
6. Разрешите прерывание в NVIC:
   NVIC_EnableIRQ(TIM2_IRQn)

*Когда таймер переполняется:*

- Счетчик обнуляется.
- Устанавливается флаг переполнения (UIF).
- Генерируется прерывание.
- NVIC вызывает обработчик прерывания TIM2_IRQHandler, который выполнит необходимые действия.==